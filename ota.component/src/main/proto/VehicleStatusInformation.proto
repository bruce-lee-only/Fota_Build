syntax = "proto3";

package carota.vsi;

import "Telemetry.proto";

option java_package = "com.carota.protobuf";

/*
* Path : /info
* Feature :
*   1. Collect vehicle info
*/
message VehicleInfoRsp {
    repeated carota.telemetry.CallTrace trace = 1;
    string vin = 2; 
    string model = 3;
    string brand = 4;    
}

/*
* Path : /cdt
* Feature :
*   1. Query vehicle condition
*/
message VehicleConditionRsp {
    enum Gear {
        UNKNOWN = 0;
        PARKING = 1;
        NEUTRAL = 2;
        DRIVE = 3;
        REVERSE = 4;
    }

    enum Power {
        PWR_UNKNOWN = 0;
        PWR_OFF = 1;
        PWR_ACC = 2;
        PWR_ON = 3;
        PWR_START = 4;
    }

    enum Charging {
        CHG_UNKNOWN = 0;
        CHG_OFF = 1;
        CHG_IDLE = 2;
        CHG_SLOW = 3;
        CHG_FAST = 4;
    }

    enum Ready {
        READY_UNKNOWN = 0;
        READY_OFF = 1;
        READY_ON = 2;
    }

    enum Motor {
        Motor_UNKNOWN = 0;
        Motor_OFF = 1;
        Motor_ON = 2;
    }

    enum Engine {
        ENGINE_UNKNOWN = 0;
        ENGINE_OFF = 1;
        ENGINE_ON = 2;
    }

    enum Handbrake {
        HANDBRAKE_UNKNOWN = 0;
        HANDBRAKE_OFF = 1;
        HANDBRAKE_ON = 2;
    }

    enum Diagnose {
        DIAGNOSE_UNKNOWN = 0;
        DIAGNOSE_OFF = 1;
        DIAGNOSE_CONNECTED = 2;
    }

    enum TelDiagnose {
        TEL_DIAGNOSE_UNKNOWN = 0;
        TEL_DIAGNOSE_NOT_READ= 1;
        TEL_DIAGNOSE_READ = 2;
    }

    enum VehicleMode {
        VEHICLE_UNKNOWN = 0;
        FACTORY = 1;
        TRANSPORT = 2;
        NORMAL = 3;
        VEHICLE_UNRECOGNIZED = 4;
        DYNO = 5;
        CRASH = 6;
        FACTORY_PAUSED = 7;
        TRANSPORT_PAUSED = 8;
    }

    enum Lock {
        LOCK_UNKNOWN = 0;
        LOCK_OFF = 1;
        LOCK_ON = 2;
    }

    enum Window {
        WINDOW_UNKNOWN = 0;
        WINDOW_CLOSED = 1;
        WINDOW_OPENED = 2;
    }

    enum Security {
        SECURITY_UNKNOWN = 0;
        SECURITY_OFF = 1;
        SECURITY_ON = 2;
    }

    enum HvReady {
        HV_READY_UNKNOWN = 0;
        HV_READY_OFF = 1;
        HV_READY_ON = 2;
    }

    enum Vtol {
        VTOL_UNKNOWN = 0;
        VTOL_OFF = 1;
        VTOL_ON = 2;
    }

    enum PetMode {
        PET_MODE_UNKNOWN = 0;
        PET_MODE_OFF = 1;
        PET_MODE_ON = 2;
    }

    enum SentinelMode {
        SENTINEL_MODE_UNKNOWN = 0;
        SENTINEL_MODE_OFF = 1;
        SENTINEL_MODE_ON = 2;
    }

    repeated carota.telemetry.CallTrace trace = 1;
    int32 speed = 2;    // m/s
    //todo: 动力电池电量
    int32 battery_power = 3;    // %
    //todo: 小电池电压
    int32 battery_voltage = 4;    // mV
    Ready power_ready = 5;
    Handbrake handbrake = 6;
    Power power = 7;
    //todo: 充电状态
    Charging charging = 8;
    Gear gear = 9;
    //todo: OBD诊断
    Diagnose diagnose = 10;
    //todo: 远程诊断
    TelDiagnose tel_diagnose = 11;
    VehicleMode vehicle_mode = 12;
    Lock lock = 13;
    Window window = 14;
    Security security = 15;
    //todo: 电车的ready状态
    Motor motor = 16;
    Engine engine = 17;
    //todo: 小电池电量
    int32 battery_level = 19; // % storage battery energy
    reserved 18;
    //todo: 动力电池是否ready
    HvReady hv_ready = 20;
    //todo: 移动电站（放电）
    Vtol vtol = 21;
    //todo: 童宠模式
    PetMode pet_mode = 22;
    //todo: 哨兵模式
    SentinelMode sentinel_mode = 23;
}

/*
* Path : /sys
* Feature :
*   1. Query vehicle system props
*   2. Set vehicle system props
*/
message VehicleSysReq {
    message Configure {
        enum Key {
            TIMER_NOTIFY = 0;
            OTA_STATE = 1;
            OTA_TASK = 2;
            OTA_PROGRESS = 3;
            OTA_TIME_COST = 4;
            OTA_EXTRA = 5;
            OTA_VIN = 6;
            OTA_USID = 7;
        }
        Key key = 1;
        int64 valInt = 2;
        string valStr = 3;
    }
    string tag = 1;
    repeated Configure data = 2;
}

message VehicleSysRsp {
    enum ModeState {
        MS_UNKNOWN = 0;
        MS_ON = 1;
        MS_OFF = 2;
        MS_PHASE = 3;
    }
    repeated carota.telemetry.CallTrace trace = 1;
    int64 system_clock = 2;
    int64 system_timer = 3;
    ModeState mode_ota = 4;
    ModeState mode_pwr = 5;
    string ota_task = 6;
    int32 ota_state = 7;
    int32 ota_progress = 8;
    int32 ota_time_cost = 9;
    string ota_extra = 10;
}

/*
* Path : /{notify}
* Feature :
*   1. Trigger notification from TSP
*/
message VehicleNotifyReq {
    enum NotifyType {
        NOTIFY_SCHEDULE = 0;
        NOTIFY_FACTORY = 1;
        NOTIFY_CTRL_CHECK = 2;
        NOTIFY_CTRL_DOWNLOAD = 3;
        NOTIFY_CTRL_INSTALL = 4;
    }
    string tag = 1;
    string id = 2;
    NotifyType type = 3;
    string data = 4;
}
/*
* Path : /event
* Feature :
*   1. Turn OFF Vehicle Power
*   2. Schedule upgrade
*   3. Entry OTA mode
*   4. Entry Electric mode
*/

message EventReq {
    enum Action {
        REGISTER = 0; 
        FIRE = 1;
        REMOVE = 2;
    }
    enum Event {
        SCHEDULE = 0;
        MODE_OTA = 1;
        MODE_PWR_OTA = 2;
        ACC_OFF = 3;
        ACC_ON = 4;
    }

    Action action = 1;
    Event event = 2;
    int64 delay = 3;    // active delay
    repeated string data = 4;
    string tag = 5;
    string mode = 6;
    int32 force = 7; //1 force exit ota, other ignore
}

