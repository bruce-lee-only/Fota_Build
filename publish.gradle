import java.security.MessageDigest

class PublishPluginExtension {
    String buildType = 'release'
    String into = 'publish'
    String version = '0'
    String baseName = 'app'
    Date buildTime = new Date()
    def rename = {
        fileName, baseName, buildType, buildTime ->
            fileName
    }
}

class PublishPlugin implements Plugin<Project> {

    def calcSha1(file) {
        MessageDigest md = MessageDigest.getInstance('SHA-1');
        file.eachByte 4096, {bytes, size ->
            md.update(bytes, 0, size);
        }
        return md.digest().collect {String.format '%02x', it}.join();
    }

    static def UpperCaseFirstLetter(String str) {
        str[0].toUpperCase() + str[1..-1]
    }

    static def formatBaseFileName(PublishPluginExtension params, String fileType) {
        if(fileType.isEmpty()) {
            params.baseName + '-v' + params.version
        } else {
            params.baseName + '-v' + params.version + '-' + fileType
        }
    }

    static def getOutputDir(Project project, PublishPluginExtension params) {
        project.file(params.into)
    }

    static def getTimestamp(PublishPluginExtension params) {
        params.buildTime.format("yywwu_HHmm", TimeZone.getTimeZone("UTC+08:00"))
    }

    void apply(Project project) {

        def params = project.extensions.create('publish', PublishPluginExtension)

        project.task(type: Delete, group: 'carota', 'clear') {
            doFirst {
                delete getOutputDir(project, params)
            }
            doLast {
                getOutputDir(project, params).mkdirs()
            }
        }

        project.task(type: Zip, group: 'carota', 'archive') {
            dependsOn project.tasks['clear']
            includeEmptyDirs false
            from 'build/outputs/mapping'
            mustRunAfter project.assemble

            doFirst {
                destinationDir getOutputDir(project, params)
                baseName formatBaseFileName(params, 'archive')
                appendix getTimestamp(params)
                include '*' + UpperCaseFirstLetter(params.buildType) + '/*'
            }
        }

        project.task(group: 'carota', 'publish') {
            dependsOn project.assemble, project.tasks['archive']
            //dependsOn project.tasks['archive']

            doFirst {
                // PATH for AGP 4.0
                 def ft = project.fileTree('build/outputs/apk')
                // PATH for AGP 7.1.3
//                def ft = project.fileTree('build/intermediates/apk')

                ft.include(params.buildType + '/*.apk')
                ft.include('*/' + params.buildType + '/*.apk')

                project.copy {
                    includeEmptyDirs false
                    from ft.files
                    into getOutputDir(project, params)
                    rename { fileName ->
                        params.rename(fileName, formatBaseFileName(params, ''), params.buildType, params.buildTime)
                    }
                }
            }
        }
    }
}

apply plugin: PublishPlugin